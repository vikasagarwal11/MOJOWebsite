
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function authed() { return request.auth != null; }
    function isOwner(r) { return authed() && r.data.createdBy == request.auth.uid; }
    function isInvited(r) { return authed() && (r.data.invitedUsers != null) && (request.auth.uid in r.data.invitedUsers); }

    match /events/{eventId} {
      allow read: if resource.data.visibility == 'public' ||
                  (authed() && (resource.data.visibility == 'members' || isOwner(resource) || isInvited(resource)));
      allow create: if authed() && request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if isOwner(resource);
    }

    // RSVPs collection-group
    match /{path=**}/rsvps/{rsvpId} {
      allow read: if authed() && resource.data.userId == request.auth.uid;
      allow create, update, delete: if authed() && request.resource.data.userId == request.auth.uid;
    }

    // Event owner can read RSVPs under their event (direct path)
    match /events/{eventId}/rsvps/{anyId} {
      allow read: if authed() && get(/databases/$(database)/documents/events/$(eventId)).data.createdBy == request.auth.uid;
    }

    // Media (optional)
    match /media/{mediaId} {
      allow read: if resource.data.isPublic == true ||
                  (authed() && (
                    resource.data.uploadedBy == request.auth.uid ||
                    (exists(/databases/$(database)/documents/events/$(resource.data.eventId)) &&
                      (
                        get(/databases/$(database)/documents/events/$(resource.data.eventId)).data.createdBy == request.auth.uid ||
                        request.auth.uid in (get(/databases/$(database)/documents/events/$(resource.data.eventId)).data.invitedUsers ?? [])
                      )
                    )
                  ));
      allow create: if authed() && request.resource.data.uploadedBy == request.auth.uid;
      allow update, delete: if authed() && request.resource.data.uploadedBy == request.auth.uid;
    }
  }
}
