rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helpers ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function userDoc() {
      return isSignedIn() ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data : null;
    }
    
    function isAdmin() {
      return userDoc() != null && userDoc().role == 'admin';
    }
    
    function isMember() {
      return userDoc() != null && userDoc().role == 'member';
    }
    
    function tokenPhone() { 
      return isSignedIn() ? request.auth.token.phone_number : null; 
    }
    
    function isBlockedPhone() {
      return isSignedIn() && request.auth.token.phone_number == "+10000000000";
    }
    
    // Enhanced user blocking functions
    function isUserBlockedFromRsvp(userId) { 
      return get(/databases/$(database)/documents/users/$(userId)).data.blockedFromRsvp == true; 
    }
    
    function isUserBlocked(currentUserId, targetUserId) {
      let blockDoc = get(/databases/$(database)/documents/userBlocks/$(currentUserId + '_' + targetUserId));
      return blockDoc != null && blockDoc.data.isActive == true;
    }
    
    function isUserBlockedBy(currentUserId, targetUserId) {
      let blockDoc = get(/databases/$(database)/documents/userBlocks/$(targetUserId + '_' + currentUserId));
      return blockDoc != null && blockDoc.data.isActive == true;
    }
    
    function canInteract(currentUserId, targetUserId, interactionType) {
      return currentUserId == targetUserId || 
        (!isUserBlocked(currentUserId, targetUserId) && !isUserBlockedBy(currentUserId, targetUserId));
    }
    
    function isNonEmptyString(v) {
      return v is string && v.size() > 0;
    }
    
    function isUrlLike(v) {
      return v is string && v.size() <= 2048 && v.matches('https?://.*');
    }
    
    function validAddress(m) {
      return m is map && 
        ('city' in m) && isNonEmptyString(m.city) && 
        ('state' in m) && isNonEmptyString(m.state) && 
        (!('street' in m) || m.street is string) && 
        (!('postalCode' in m) || m.postalCode is string);
    }
    
    function validSocial(m) {
      return m is map && 
        m.keys().hasOnly(['instagram','facebook','twitter','tiktok','youtube','website']) && 
        (!('instagram' in m) || isUrlLike(m.instagram)) && 
        (!('facebook' in m) || isUrlLike(m.facebook)) && 
        (!('twitter' in m) || isUrlLike(m.twitter)) && 
        (!('tiktok' in m) || isUrlLike(m.tiktok)) && 
        (!('youtube' in m) || isUrlLike(m.youtube)) && 
        (!('website' in m) || isUrlLike(m.website));
    }
    
    function validUserProfileData(newData) {
      return (!('displayName' in newData) || isNonEmptyString(newData.displayName)) && 
        (!('email' in newData) || newData.email is string) && 
        (!('photoURL' in newData) || isUrlLike(newData.photoURL)) && 
        (!('about' in newData) || (newData.about is string && newData.about.size() <= 1000)) && 
        (!('age' in newData) || (newData.age is number && newData.age >= 13 && newData.age <= 120)) && 
        (!('address' in newData) || validAddress(newData.address)) && 
        (!('social' in newData) || validSocial(newData.social)) &&
        (!('fcmToken' in newData) || (newData.fcmToken is string && newData.fcmToken.size() > 0));
    }
    
    // Enhanced event validation
    function validEventData(newData) {
      return isNonEmptyString(newData.title) && 
        newData.title.size() <= 200 &&
        isNonEmptyString(newData.description) && 
        newData.description.size() <= 2000 &&
        newData.startAt is timestamp &&
        (!('endAt' in newData) || newData.endAt is timestamp) &&
        (!('tags' in newData) || (newData.tags is list && newData.tags.size() <= 10)) &&
        (!('location' in newData) || isNonEmptyString(newData.location)) &&
        (!('maxAttendees' in newData) || (newData.maxAttendees is number && newData.maxAttendees > 0));
    }
    
    // Check if user is event creator
    function isEventCreator(eventId) {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/events/$(eventId)) &&
        get(/databases/$(database)/documents/events/$(eventId)).data.createdBy == request.auth.uid;
    }
    
    function validStatusHistory(history) {
      return history is list
        && history.size() > 0
        && history[0] is map
        && ('status' in history[0]) && history[0].status in ['going', 'maybe', 'not-going']
        && ('changedAt' in history[0]) && history[0].changedAt is timestamp
        && ('changedBy' in history[0]) && isNonEmptyString(history[0].changedBy);
    }
    
    // --- USERS ---
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && 
        request.auth.uid == userId && 
        (!('role' in request.resource.data) || (request.resource.data.role == 'member' && !isBlockedPhone())) && 
        validUserProfileData(request.resource.data);
      allow update: if isSignedIn() && 
        request.auth.uid == userId && 
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']) && 
        validUserProfileData(request.resource.data) ||
        (isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['blockedFromRsvp', 'updatedAt', 'fcmToken'])) &&
        (!('fcmToken' in request.resource.data) || request.resource.data.fcmToken is string);
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }
    
    // --- EVENT TEASERS ---
    match /event_teasers/{teaserId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // --- USER BLOCKS ---
    match /userBlocks/{blockId} {
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.blockedByUserId || 
        request.auth.uid == resource.data.blockedUserId ||
        isAdmin()
      );
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.blockedByUserId;
      allow update: if isSignedIn() && (
        request.auth.uid == resource.data.blockedByUserId ||
        isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // --- BLOCK REPORTS ---
    match /blockReports/{reportId} {
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.reporterUserId ||
        isAdmin()
      );
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.reporterUserId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // --- MANUAL FIXES (Admin System Tools) ---
    match /manual_fixes/{fixId} {
      allow read, create, update, delete: if isAdmin();
    }
    
    // --- EVENTS (Enhanced) ---
    match /events/{eventId} {
      allow read: if
        // Past events are always readable (for history)
        resource.data.startAt < request.time ||
        // Public events are readable by everyone
        (('visibility' in resource.data) && resource.data.visibility == 'public') ||
        // Legacy support: old 'public' field
        (('public' in resource.data) && resource.data.public == true) ||
        // Members-only events: visible to signed-in members/admins
        (isSignedIn() && (isMember() || isAdmin()) && 
         (('visibility' in resource.data) && resource.data.visibility == 'members')) ||
        // Private events: only for creator, invited users, or admins
        (isSignedIn() && (
          request.auth.uid == resource.data.createdBy ||
          isAdmin() ||
          (('invitedUsers' in resource.data) && request.auth.uid in resource.data.invitedUsers)
        ));
      
      // Enhanced create/update/delete permissions
      allow create: if isSignedIn() && 
        (isMember() || isAdmin()) && 
        request.auth.uid == request.resource.data.createdBy &&
        validEventData(request.resource.data);
      
      allow update: if isSignedIn() && 
        (isAdmin() || isEventCreator(eventId)) &&
        validEventData(request.resource.data);
      
      allow delete: if isSignedIn() && 
        (isAdmin() || isEventCreator(eventId));
      
      // Enhanced RSVP management with blocking support
      match /rsvps/{userId} {
        allow read: if isSignedIn();
        
        allow create: if (isMember() || isAdmin()) && 
          request.auth.uid == userId && 
          !isUserBlockedFromRsvp(request.auth.uid) &&
          request.resource.data.keys().hasOnly(['status', 'createdAt', 'updatedAt', 'statusHistory']) && 
          request.resource.data.status in ['going', 'maybe', 'not-going'] &&
          validStatusHistory(request.resource.data.statusHistory) &&
          request.resource.data.statusHistory.size() == 1 &&
          request.resource.data.statusHistory[0].status == request.resource.data.status &&
          request.resource.data.statusHistory[0].changedBy == request.auth.uid &&
          (
            // Public events: anyone can RSVP
            (('visibility' in resource.data) && resource.data.visibility == 'public') ||
            // Legacy support: old 'public' field
            (('public' in resource.data) && resource.data.public == true) ||
            // Members-only events: only members can RSVP
            (isSignedIn() && (isMember() || isAdmin()) && 
             (('visibility' in resource.data) && resource.data.visibility == 'members')) ||
            // Private events: only invited users can RSVP
            (('invitedUsers' in resource.data) && request.auth.uid in resource.data.invitedUsers) ||
            // Event creator can always RSVP
            request.auth.uid == resource.data.createdBy
          );
        
        allow update: if (isMember() || isAdmin()) && 
          (request.auth.uid == userId || isAdmin()) &&
          !isUserBlockedFromRsvp(userId) &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['status', 'updatedAt', 'statusHistory']) && 
          request.resource.data.status in ['going', 'maybe', 'not-going'] &&
          validStatusHistory(request.resource.data.statusHistory) &&
          (request.auth.uid == userId
              ? request.resource.data.statusHistory.size() == resource.data.statusHistory.size() + 1
                && request.resource.data.statusHistory[request.resource.data.statusHistory.size() - 1].status == request.resource.data.status
                && request.resource.data.statusHistory[request.resource.data.statusHistory.size() - 1].changedBy == request.auth.uid
              : request.resource.data.statusHistory.size() == resource.data.statusHistory.size() + 1
                && request.resource.data.statusHistory[request.resource.data.statusHistory.size() - 1].changedBy == request.auth.uid);
        
        // Enhanced: Allow admins to modify any RSVP
        allow delete: if (isMember() || isAdmin()) && 
          (request.auth.uid == userId || isAdmin());
      }
    }
    
    // --- POSTS ---
    match /posts/{postId} {
      allow read: if (('isPublic' in resource.data) && resource.data.isPublic == true) || 
        isMember() || isAdmin();
      
      allow create: if isSignedIn() && 
        (isMember() || isAdmin()) && 
        request.auth.uid == request.resource.data.authorId;
      
      allow update, delete: if isSignedIn() && 
        (request.auth.uid == resource.data.authorId || isAdmin());
      
      match /likes/{userId} {
        allow read: if true;
        allow create: if (isMember() || isAdmin()) && 
          request.auth.uid == userId && 
          request.resource.data.keys().hasOnly(['userId','createdAt']) && 
          request.resource.data.userId == userId;
        allow update: if false;
        allow delete: if (isMember() || isAdmin()) && 
          (request.auth.uid == userId || isAdmin());
      }
      
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn() && 
          request.auth.uid == request.resource.data.authorId && 
          isNonEmptyString(request.resource.data.text) && 
          request.resource.data.text.size() <= 1000 && 
          request.resource.data.keys().hasOnly(['authorId','authorName','text','createdAt']);
        allow update: if isSignedIn() && 
          (request.auth.uid == resource.data.authorId || isAdmin()) && 
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['text','updatedAt']);
        allow delete: if isSignedIn() && 
          (request.auth.uid == resource.data.authorId || isAdmin());
      }
    }
    
    // --- MEDIA ---
    match /media/{mediaId} {
      allow read: if (resource.data.isPublic == true) || isMember() || isAdmin();
      allow create: if isSignedIn() && 
        request.auth.uid == request.resource.data.uploadedBy;
      allow update, delete: if isSignedIn() && 
        (request.auth.uid == resource.data.uploadedBy || isAdmin()) ||
        // Allow view counter updates for all users (including guests)
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['viewsCount']));
      
      match /likes/{userId} {
        allow read: if true;
        allow create: if (isMember() || isAdmin()) && 
          request.auth.uid == userId && 
          request.resource.data.keys().hasOnly(['userId','createdAt']) && 
          request.resource.data.userId == userId;
        allow update: if false;
        allow delete: if (isMember() || isAdmin()) && 
          (request.auth.uid == userId || isAdmin());
      }
      
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn() && 
          request.auth.uid == request.resource.data.authorId && 
          isNonEmptyString(request.resource.data.text) && 
          request.resource.data.text.size() <= 1000 && 
          request.resource.data.keys().hasOnly(['authorId','authorName','text','createdAt']);
        allow update: if isSignedIn() && 
          (request.auth.uid == resource.data.authorId || isAdmin()) && 
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['text','updatedAt']);
        allow delete: if isSignedIn() && 
          (request.auth.uid == resource.data.authorId || isAdmin());
      }
    }
    
    // --- SPONSORS ---
    match /sponsors/{sponsorId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
      
      match /promotions/{promotionId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
      }
    }
    
    // --- NOTIFICATIONS (Enhanced) ---
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Allow admins to create notifications (for system notifications)
      allow create: if isAdmin();
      
      // Allow users to update only their own notifications (mark as read)
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId && 
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['read']);
      
      // Allow admins to delete notifications
      allow delete: if isAdmin();
    }
    
    // --- Fallback for stray comments ---
    match /{parentPath=**}/comments/{commentId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && 
        request.auth.uid == request.resource.data.authorId && 
        isNonEmptyString(request.resource.data.text) && 
        request.resource.data.text.size() <= 1000;
      allow update, delete: if isSignedIn() && 
        (request.auth.uid == resource.data.authorId || isAdmin());
    }
    
    // --- Default Security: Deny all unknown collections ---
    match /{document=**} {
      allow read, write: if false;
    }
  }
}