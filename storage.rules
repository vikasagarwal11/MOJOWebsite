rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helpers
    function isSignedIn() { return request.auth != null; }
    // Reads the caller's user doc to check role (incurs a Firestore read)
    function isAdmin() {
      return isSignedIn() &&
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    function isImage() {
      return request.resource.contentType.matches('image/.*')
        || request.resource.name.matches('.*\\.(jpg|jpeg|png|gif|webp)$');
    }
    
    // =========================
    // User media uploads: media/{uid}/...
    // =========================
    match /media/{userId}/{allPaths=**} {
      allow read: if true; // or isSignedIn() if you prefer private reads
      allow write: if request.auth != null
                   && (request.auth.uid == userId || isAdmin())
                   && request.resource.size < 250 * 1024 * 1024 // < 250MB (increased for video uploads)
                   && (request.resource.contentType.matches('image/.*')
                       || request.resource.contentType.matches('video/.*')
                       || request.resource.contentType.matches('audio/.*'));
    }
    
    // =========================
    // Profile pictures: profiles/{uid}/{fileName}
    // =========================
    match /profiles/{userId}/{fileName} {
      allow read: if true;
      allow write: if isSignedIn()
                   && request.auth.uid == userId
                   && request.resource.size < 5 * 1024 * 1024 // < 5MB
                   && isImage();
    }
    
    // =========================
    // Event images (admins only): events/{...}
    // =========================
    match /events/{fileName=**} {
      allow read: if true;
      allow write: if isAdmin()
                   && request.resource.size < 10 * 1024 * 1024 // < 10MB
                   && isImage();
    }
    
    // =========================
    // Sponsor logos (admins only): sponsors/{...}
    // =========================
    match /sponsors/{fileName=**} {
      allow read: if true;
      allow write: if isAdmin()
                   && request.resource.size < 5 * 1024 * 1024 // < 5MB
                   && isImage();
    }
    
    // =========================
    // Post images (members and admins): posts/{...}
    // =========================
    match /posts/{fileName=**} {
      allow read: if true;
      allow write: if isSignedIn()
                   && (request.resource.size < 10 * 1024 * 1024) // < 10MB
                   && (request.resource.contentType.matches('image/.*')
                       || request.resource.contentType.matches('video/.*'));
      // Delete: Author or admin can delete post media
      // Note: Post media may not have metadata, so we allow deletion by authenticated users
      // This is less secure but posts are generally public content
      allow delete: if isSignedIn();
    }
    
    // =========================
    // Misc files (for existing posts that might have been stored there): misc/{...}
    // =========================
    match /misc/{fileName=**} {
      allow read: if true;
      allow write: if isSignedIn()
                   && (request.resource.size < 10 * 1024 * 1024) // < 10MB
                   && (request.resource.contentType.matches('image/.*')
                       || request.resource.contentType.matches('video/.*'));
      allow delete: if isSignedIn() && isAdmin(); // Only admins can delete misc files
    }
    
    // =========================
    // Comment attachments (members only): comments/{...}
    // =========================
    match /comments/{userId}/{fileName=**} {
      allow read: if true;
      allow write: if isSignedIn()
                   && request.auth.uid == userId
                   && request.resource.size < 15 * 1024 * 1024
                   && (request.resource.contentType.matches('image/.*')
                       || request.resource.contentType.matches('video/.*'));
      allow delete: if isSignedIn()
                    && (isAdmin() || request.auth.uid == userId);
    }

    // Legacy flat comment attachments without user folders
    match /comments/{fileName=**} {
      allow read: if true;
      allow write: if isSignedIn()
                   && request.resource.size < 15 * 1024 * 1024
                   && (request.resource.contentType.matches('image/.*')
                       || request.resource.contentType.matches('video/.*'))
                   && matchesRequestOwner();
      allow delete: if isSignedIn()
                    && (isAdmin() || resourceOwnedByRequester());
    }
    
    // =========================
    // Media comment attachments: media-comments/{...}
    // =========================
    match /media-comments/{fileName=**} {
      allow read: if true;
      // Upload: Require signed-in user + ownership metadata must match auth.uid
      allow write: if isSignedIn()
                   && request.resource.size < 15 * 1024 * 1024 // < 15MB
                   && (request.resource.contentType.matches('image/.*')
                       || request.resource.contentType.matches('video/.*'))
                   && request.resource.metadata != null
                   && request.resource.metadata.customMetadata != null
                   && request.resource.metadata.customMetadata.userId == request.auth.uid;
      // Delete: Author or admin can delete their comment attachments
      allow delete: if isSignedIn()
                    && (isAdmin() || (resource != null 
                                      && resource.metadata != null 
                                      && resource.metadata.customMetadata != null 
                                      && resource.metadata.customMetadata.userId == request.auth.uid));
    }

    function matchesRequestOwner() {
      return request.resource != null
        && request.resource.metadata != null
        && request.resource.metadata.customMetadata != null
        && request.resource.metadata.customMetadata.userId == request.auth.uid;
    }

    function resourceOwnedByRequester() {
      return resource != null
        && resource.metadata != null
        && resource.metadata.customMetadata != null
        && resource.metadata.customMetadata.userId == request.auth.uid;
    }
    
    // Fallback: deny anything not matched above
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
